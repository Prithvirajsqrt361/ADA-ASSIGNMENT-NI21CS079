{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <iostream>\
#include <vector>\
using namespace std;\
\
class NQueens \{\
public:\
    vector<vector<string>> solveNQueens(int n) \{\
        vector<vector<string>> solutions;\
        vector<string> emptyBoard(n, string(n, '.')); \
\
        backtrack(solutions, emptyBoard, 0, n);\
        return solutions;\
    \}\
\
private:\
    bool isSafe(int row, int col, const vector<string>& board) \{\
        int n = board.size();\
        for (int i = 0; i < n; ++i) \{\
            if (board[row][i] == 'Q' || board[i][col] == 'Q')\
                return false;\
        \}\
        for (int i = row, j = col; i >= 0 && j >= 0; --i, --j) \{\
            if (board[i][j] == 'Q')\
                return false;\
        \}\
\
        for (int i = row, j = col; i >= 0 && j < n; --i, ++j) \{\
            if (board[i][j] == 'Q')\
                return false;\
        \}\
\
        return true;\
    \}\
\
    void backtrack(vector<vector<string>>& solutions, vector<string>& board, int row, int n) \{\
        if (row == n) \{\
            solutions.push_back(board);\
            return;\
        \}\
\
        for (int col = 0; col < n; ++col) \{\
            if (isSafe(row, col, board)) \{\
                board[row][col] = 'Q';\
                backtrack(solutions, board, row + 1, n);\
                board[row][col] = '.'; \
            \}\
        \}\
    \}\
\};\
\
int main() \{\
    int n;\
    cout << "Enter the size of the board: ";\
    cin >> n;\
\
    NQueens solver;\
    vector<vector<string>> solutions = solver.solveNQueens(n);\
\
    for (const auto& solution : solutions) \{\
        for (const string& row : solution) \{\
            cout << row << "\\n";\
        \}\
        cout << "\\n";\
    \}\
\
    return 0;\
\}\
}