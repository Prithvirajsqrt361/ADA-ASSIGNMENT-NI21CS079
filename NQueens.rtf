#include <iostream>
#include <vector>
using namespace std;

class NQueens 
{
public:
    vector<vector<string>> solveNQueens(int n) 
    {
        vector<vector<string>> solutions;
        vector<string> emptyBoard(n, string(n, '.')); 

        backtrack(solutions, emptyBoard, 0, n);
        return solutions;
    }

private:
    bool isSafe(int row, int col, const vector<string>& board) 
    {
        int n = board.size();
        for (int i = 0; i < n; ++i) 
        {
            if (board[row][i] == 'Q' || board[i][col] == 'Q')
                return false;
        }
        for (int i = row, j = col; i >= 0 && j >= 0; --i, --j) 
        {
            if (board[i][j] == 'Q')
                return false;
        }

        for (int i = row, j = col; i >= 0 && j < n; --i, ++j) 
        {
            if (board[i][j] == 'Q')
                return false;
        }

        return true;
    }

    void backtrack(vector<vector<string>>& solutions, vector<string>& board, int row, int n) 
    {
        if (row == n) 
        {
            solutions.push_back(board);
            return;
        }

        for (int col = 0; col < n; ++col) 
        {
            if (isSafe(row, col, board)) 
            {
                board[row][col] = 'Q';
                backtrack(solutions, board, row + 1, n);
                board[row][col] = '.'; 
            }
        }
    }
};

int main() 
{
    int n;
    cout << "Enter the size of the board: ";
    cin >> n;

    NQueens solver;
    vector<vector<string>> solutions = solver.solveNQueens(n);

    for (const auto& solution : solutions) 
    {
        for (const string& row : solution) 
        {
            cout << row << "\n";
        }
        cout << "\n";
    }

    return 0;
}
